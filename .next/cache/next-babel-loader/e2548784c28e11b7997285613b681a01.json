{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport ProjectCard from \"../../components/ProjectCard\";\nimport { Status } from \"../../components/Status\";\nimport DbService from \"../../Services/DbServices\";\n\nclass ProjectsIndex extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: null\n    });\n  }\n\n  componentDidMount() {\n    if (!this.state.items) {\n      const items = new Array();\n\n      for (let i = 0; i < this.props.data.length; i++) {\n        let project = this.props.data[i];\n        items.push(__jsx(ProjectCard, {\n          name: project.name,\n          language: project.language,\n          url: project.url,\n          license: project.license,\n          description: project.description,\n          key: project.name\n        }));\n      }\n\n      this.setState({\n        items\n      });\n    }\n  }\n\n  render() {\n    if (this.props.hasFailed) {\n      return __jsx(Status, null, \"Can't connect to database\");\n    }\n\n    return __jsx(React.Fragment, null, this.state.items);\n  }\n\n}\n\nexport default ProjectsIndex;\nexport async function getStaticProps(context) {\n  let data = await DbService.getProjects();\n  return {\n    props: {\n      data,\n      hasFailed: false\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}