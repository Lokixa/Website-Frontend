{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lubas\\\\source\\\\js\\\\frontend-next\\\\pages\\\\projects\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport ProjectCard from \"../../components/ProjectCard\";\nimport { Status } from \"../../components/Status\";\nimport DbService from \"../../Services/DbServices\";\n\nclass ProjectsIndex extends React.Component {\n  componentDidMount() {}\n\n  render() {\n    if (this.props.hasFailed) {\n      return __jsx(Status, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }\n      }, \"Can't connect to database\");\n    }\n\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 10\n      }\n    }, this.props.items);\n  }\n\n}\n\nexport default ProjectsIndex;\nexport async function getStaticProps(context) {\n  let data = await DbService.getProjects();\n  const items = new Array();\n  data.forEach(project => {\n    items.push(__jsx(ProjectCard, {\n      name: project.name,\n      language: project.language,\n      url: project.url,\n      license: project.license,\n      description: project.description,\n      key: project.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 4\n      }\n    }));\n  });\n  return {\n    props: {\n      items,\n      hasFailed: false\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/lubas/source/js/frontend-next/pages/projects/index.tsx"],"names":["React","ProjectCard","Status","DbService","ProjectsIndex","Component","componentDidMount","render","props","hasFailed","items","getStaticProps","context","data","getProjects","Array","forEach","project","push","name","language","url","license","description"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;AAOA,MAAMC,aAAN,SAA4BJ,KAAK,CAACK,SAAlC,CAA2D;AAC1DC,EAAAA,iBAAiB,GAAG,CAAE;;AAEtBC,EAAAA,MAAM,GAAG;AACR,QAAI,KAAKC,KAAL,CAAWC,SAAf,EAA0B;AACzB,aAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACA;;AACD,WAAO,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiB,KAAKD,KAAL,CAAWE,KAA5B,CAAP;AACA;;AARyD;;AAU3D,eAAeN,aAAf;AAEA,OAAO,eAAeO,cAAf,CAA8BC,OAA9B,EAAuC;AAC7C,MAAIC,IAAI,GAAG,MAAMV,SAAS,CAACW,WAAV,EAAjB;AACA,QAAMJ,KAAK,GAAG,IAAIK,KAAJ,EAAd;AACAF,EAAAA,IAAI,CAACG,OAAL,CAAcC,OAAD,IAAa;AACzBP,IAAAA,KAAK,CAACQ,IAAN,CACC,MAAC,WAAD;AACC,MAAA,IAAI,EAAED,OAAO,CAACE,IADf;AAEC,MAAA,QAAQ,EAAEF,OAAO,CAACG,QAFnB;AAGC,MAAA,GAAG,EAAEH,OAAO,CAACI,GAHd;AAIC,MAAA,OAAO,EAAEJ,OAAO,CAACK,OAJlB;AAKC,MAAA,WAAW,EAAEL,OAAO,CAACM,WALtB;AAMC,MAAA,GAAG,EAAEN,OAAO,CAACE,IANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAUA,GAXD;AAYA,SAAO;AACNX,IAAAA,KAAK,EAAE;AACNE,MAAAA,KADM;AAEND,MAAAA,SAAS,EAAE;AAFL;AADD,GAAP;AAMA","sourcesContent":["import React from \"react\";\r\nimport ProjectCard from \"../../components/ProjectCard\";\r\nimport { Status } from \"../../components/Status\";\r\nimport DbService from \"../../Services/DbServices\";\r\n\r\ninterface ProjectsState {\r\n\titems: JSX.Element[] | null;\r\n\thasFailed: boolean;\r\n}\r\n\r\nclass ProjectsIndex extends React.Component<ProjectsState> {\r\n\tcomponentDidMount() {}\r\n\r\n\trender() {\r\n\t\tif (this.props.hasFailed) {\r\n\t\t\treturn <Status>Can't connect to database</Status>;\r\n\t\t}\r\n\t\treturn <React.Fragment>{this.props.items}</React.Fragment>;\r\n\t}\r\n}\r\nexport default ProjectsIndex;\r\n\r\nexport async function getStaticProps(context) {\r\n\tlet data = await DbService.getProjects();\r\n\tconst items = new Array<JSX.Element>();\r\n\tdata.forEach((project) => {\r\n\t\titems.push(\r\n\t\t\t<ProjectCard\r\n\t\t\t\tname={project.name}\r\n\t\t\t\tlanguage={project.language}\r\n\t\t\t\turl={project.url}\r\n\t\t\t\tlicense={project.license}\r\n\t\t\t\tdescription={project.description}\r\n\t\t\t\tkey={project.name}\r\n\t\t\t/>\r\n\t\t);\r\n\t});\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\titems,\r\n\t\t\thasFailed: false,\r\n\t\t},\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}